#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

//  0  1  2  3  4  5      6      7  8  9 10 11 12
// 13 14 15 16 17 18     19     20 21 22 23 24 25
// 26 27 28 29 30 31     32     33 34 35 36 37 38
// 39 40 41 42 43 44     45     46 47 48 49 50 51
#define LEFT_KEYS 0 1 2 3 4 5 13 14 15 16 17 18  26 27 28 29 30 31 39 40 41 42 43 44 // left-hand keys
#define LEFT_THUMBS 53 54 55 56 57 // left-hand keys
#define RIGHT_KEYS 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 // right-hand keys
#define RIGHT_THUMBS 59 60 61 62 63 // right-hand thumbs


// colors
#difine RGB_BLUE RGB_COLOR_HSB(300,100,50)
#difine RGB_RED RGB_COLOR_HSB(100,100,50)

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };


// mouse scroll
&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

// mouse move
&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Left";
            #binding-cells = <2>;
            flavor = "balanced"; //produces a "hold" if another key is both pressed and released within the tapping-term.
            require-prior-idle-ms = <150>; // immediately resolves a HRM as "tap" when it is pressed shortly after another key has been tapped.
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_KEYS RIGHT_THUMBS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release; //delays the positional-hold-tap decision until the next key's release. With this, mods can be combined when held
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Right";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_KEYS LEFT_THUMBS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        lt_nav: lt_nav {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&layer_ug 1 RGB_BLUE>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        lt_sym: lt_sym {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&layer_ug 2 RGB_RED>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };
    };

    macros {
        layer_ug: layer_ug {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_ON>
                , <&macro_param_2to1>
                , <&macro_tap &rgb_ug MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_OFF>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            bindings = <
&gresc      &kp N1        &kp N2         &kp N3          &kp N4          &kp N5          &kp C_VOLUME_UP         &kp N6             &kp N7          &kp N8            &kp N9          &kp N0                   &kp RIGHT_BRACKET
&kp TAB     &kp Q         &kp W          &kp F           &kp P           &kp G           &kp C_VOLUME_DOWN       &kp J              &kp L           &kp U             &kp Y           &kp SEMI                 &kp LEFT_BRACKET
// &kp CAPS    &hml LGUI A   &hml LALT R    &hml LCTRL S    &hml LSHIFT T   &kp D           &kp LEFT_ARROW          &kp H              &hmr LSHIFT N   &hmr LCTRL E      &hmr LALT I     &hmr LGUI O              &kp APOS
&kp CAPS    &kp A         &kp R          &kp S           &kp T           &kp D           &kp LEFT_ARROW          &kp H              &kp N           &kp E             &kp I           &kp O                    &kp APOS
&kp LSHFT   &kp Z         &kp X          &kp C           &kp V           &kp B           &kp RIGHT_ARROW         &kp K              &kp M           &kp COMMA         &kp DOT         &kp FSLH                 &kp DELETE
&trans      &kp LGUI      &kp LALT       &kp LCTRL       &lt_nav 0 ESCAPE         &kp SPACE       &kp C_MUTE              &mt LSHIFT TAB     &lt_sym 0 ENTER     &kp LA(LC(LSHFT)) &kp RC(SPACE)   &mt RIGHT_ALT LG(SPACE)
            >;

            display-name = "ALPHA";
        };

        nav_layer {
            bindings = <
&trans      &trans        &trans        &trans           &trans          &trans          &mmv MOVE_UP            &trans             &trans          &trans          &trans            &trans                  &trans
&trans      &kp LC(Q)     &kp LC(W)     &kp LC(F)        &kp LC(P)       &kp LC(G)       &mmv MOVE_DOWN          &kp PG_UP          &kp HOME        &kp UP          &kp END           &kp LC(SEMI)            &trans
&trans      &kp LGUI      &sk LALT      &sk LCTRL        &sk LSHIFT      &kp LC(D)       &mmv MOVE_LEFT          &kp PG_DN          &kp LEFT        &kp DOWN        &kp RIGHT         &kp LC(O)               &trans
&trans      &kp LC(Z)     &kp LC(X)     &kp LC(C)        &kp LC(V)       &kp LC(B)       &mmv MOVE_RIGHT         &kp LC(K)          &kt LC(M)       &kp LC(COMMA)   &kp LC(PERIOD)    &kp LC(SLASH)           &trans
&trans      &trans        &trans        &trans           &trans          &trans          &mkp LCLK               &trans             &trans          &trans          &trans            &trans
            >;

            display-name = "NAV";
        };

        symb_layer {
            bindings = <
&trans      &kp F1        &kp F2        &kp F3           &kp F4          &kp F5          &mmv MOVE_UP            &kp F6             &kp F7          &kp F8          &kp F9            &kp F10                &kp F11
// &trans      &kp N1        &kp N2        &kp N3           &kp N4          &kp N5          &mmv MOVE_DOWN          &kp N6             &kp N7          &kp N8          &kp N9            &kp N0                 &kp F12
&trans      &kp EXCL      &kp AT        &kp HASH         &kp DOLLAR      &kp PERCENT     &mmv MOVE_DOWN          &kp CARET          &kp AMPERSAND   &kp ASTERISK    &kp LPAR          &kp RPAR               &kp F12
&trans      &kp PLUS      &kp EQUAL     &kp MINUS        &kp UNDER       &kp LBRC        &mmv MOVE_LEFT          &kp RBRC           &sk LSHIFT      &sk LCTRL       &sk LALT          &kp LGUI               &kp PRINTSCREEN
&trans      &kp PIPE      &trans        &caps_word       &trans          &kp LBKT        &mmv MOVE_RIGHT         &kp RBKT           &kp RBKT        &trans          &trans            &kp BACKSLASH          &trans
&trans      &trans        &trans        &trans           &trans          &trans          &mkp RCLK               &trans             &trans          &trans          &trans            &trans
            >;

            display-name = "SYMBOL";
        };

        sys_layer {
            bindings = <
&none       &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4  &none                   &none              &none           &none            &none            &none                  &none
&none       &bt BT_CLR    &bt BT_CLR_ALL  &none         &ext_power EP_TOG  &none         &none                   &rgb_ug RGB_TOG    &rgb_ug RGB_BRI &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI        &none
&none       &out OUT_USB  &out OUT_BLE    &none         &none              &none         &none                   &rgb_ug RGB_EFF    &rgb_ug RGB_BRD &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD        &none
&sys_reset  &bootloader   &none           &none         &none              &none         &none                   &none              &none           &none            &soft_off        &bootloader            &sys_reset
&none       &none         &none           &none         &none              &none         &none                   &none              &none           &none            &none            &none
            >;

            display-name = "SYSTEM";
        };
    };
};
